//**morris traversal

public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> rst = new ArrayList<Integer>();
        if(root == null) return rst;
        TreeNode pre = null;
        LinkedList<TreeNode> stack = new LinkedList<TreeNode>();
        while(root != null || !stack.isEmpty()){
            if(root != null){
                stack.push(root);
                root = root.left;
            }else{
                TreeNode peekNode = stack.peek();
                if(peekNode.right != null && peekNode.right != pre){
                    root = peekNode.right;
                }else{
                    stack.pop();
                    rst.add(peekNode.val);
                    
                    pre = peekNode;
                }
            }
        }
        
        return rst;
    }
    
    1）如果当前栈顶元素的右结点存在并且还没访问过（也就是右结点不等于上一个访问结点），那么就把当前结点移到右结点继续循环；
2）如果栈顶元素右结点是空或者已经访问过，那么说明栈顶元素的左右子树都访问完毕，应该访问自己继续回溯了。
下面列举一下代码：
