public double findMedianSortedArrays(int[] A, int[] B) {
        int len = A.length + B.length;
        if(len % 2 == 1){
            return findKth(A, 0, B, 0, len/2 + 1);
        }else{
            return (findKth(A, 0, B, 0, len/2) + findKth(A, 0, B, 0, len/2 + 1)) / 2.0;
        }
    }
    
    private int findKth(int[] a, int a_start, int[] b, int b_start, int k){
        if(a_start >= a.length){
            return b[b_start + k - 1];
        }
        if(b_start >= b.length){
            return a[a_start + k - 1];
        }
        
        if(k == 1){
            return Math.min(a[a_start], b[b_start]);
        }
        
        int numA = a_start + k/2 - 1 < a.length ? a[a_start+ k/2 - 1] : Integer.MAX_VALUE;
        int numB = b_start + k/2 - 1 < b.length ? b[b_start + k / 2 -1] : Integer.MAX_VALUE;
        
        if(numA < numB){
            return findKth(a, a_start + k/2, b, b_start, k-k/2);
        }else{
            return findKth(a, a_start, b, b_start + k/2, k-k/2);
        }
        
        
    }
