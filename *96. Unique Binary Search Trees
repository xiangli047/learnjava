public int numTrees(int n) {
        if(n == 0) return 0;
        
        int[] dp = new int[n+1];
        dp[0] = 1;
        
        for(int num = 1; num < n + 1; num++){
            
            for(int i = 0; i<num;i++){
                dp[num] += dp[i]*dp[num-i-1];
            }
        }
        return dp[n];
    }
    /*
The case for 3 elements example
Count[3] = Count[0]*Count[2]  (1 as root)
              + Count[1]*Count[1]  (2 as root)
              + Count[2]*Count[0]  (3 as root)

Therefore, we can get the equation:
Count[i] = ∑ Count[0...k] * [ k+1....i]     0<=k<i-1
    
    
  二叉搜索树有个性质，就是左边的数都比根小，右边的数都比根大。
  另外，题目说明二叉树的节点是从1到n，所以我们能确定如果根为k，
  则根左边的数是1到k-1，根右边的数是k+1到n。还有一点技巧是，对于通过一个根来说，
  唯一二叉树的数量是其左子树的数量乘以右子树的数量，这是简单的乘法原理。
  并且，左右子树的形态数量是跟具体的数无关的，只跟这个树里有多少节点有关。
  而根可以选择从1到n的任意的数，唯一二叉树的总数，就是根为1到n的树相加。
  所以该问题化简为以k为根，其唯一左子树和右子树各有多少，这就是个动态规划的问题了.
  
  同时为了根据递推式来写程序，需要将递推式简化一下。
根据卡特兰数，C0Cn+1，因为leetcode输入的参数是n，所以为了避免混淆，这里递推式写成Ct+1,初始值为C0 = 1。

原始的递推式是： Ct+1 += Ci*Ct-i (0<= i <=t)
现在令变量num=t+1，那么t=num-1

所以原始递推式做变量替换得：Cnum += Ci*Cnum-1-i (0<= i <=num-1) 
而num的取值范围是[1, n]因为C0已知。
