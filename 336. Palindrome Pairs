//题意：给一个string数组， 如果里面任意2个string可以组成一个回文，那就按前后顺序记录下2个string的index，记录所有这种combo
核心：用map保存每个单词，然后2层循环，外层是各个单词，内层是string的位置。进行以下条件判断
1. string本身是回文，那么只要找空string
2. 任何string的reverse跟他都可以组成回文
3. string的左半边如果是回文，那么右半边的reverse如果有，那么回文就是s2+s1
4. string右半边是回文，那么左半边的reverse存在，就是s1+s2
另外注意因为在内层循环的边界会有重复，所以判断strRight的时候，如果为0了，就不用继续操作了，因为结果是跟之前left为0一样的



public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        Map<String, Integer> map = new HashMap<>();
        
        for(int i = 0; i < words.length; i++){
            map.put(words[i], i);
        }
        
        for(int i = 0; i < words.length; i++){
            for(int j = 0; j <= words[i].length(); j++){
                String strLeft = words[i].substring(0, j);
                String strRight = words[i].substring(j);
                
                if(palind(strLeft)){
                    String strRightRvs = new StringBuilder(strRight).reverse().toString();
                    if(map.containsKey(strRightRvs) && map.get(strRightRvs) != i){
                        List<Integer> tmp = new ArrayList<>();
                        tmp.add(map.get(strRightRvs));
                        tmp.add(i);
                        rst.add(tmp);
                    }
                }
                
                if(palind(strRight)){
                    String strLeftRvs = new StringBuilder(strLeft).reverse().toString();
                    if(map.containsKey(strLeftRvs) && map.get(strLeftRvs) != i && strRight.length() != 0){
                        List<Integer> tmp = new ArrayList<>();
                        tmp.add(i);
                        tmp.add(map.get(strLeftRvs));
                        rst.add(tmp);
                    }
                }
                
            }
        }
        
        return rst;
    }
    
    private boolean palind(String str){
        if(str.length() < 2) return true;
        int p1 = 0, p2 = str.length() - 1;
        
        while(p1 < p2){
            if(str.charAt(p1) != str.charAt(p2) ){
                return false;
            }
            p1++;
            p2--;
        }
        return true;
    }
