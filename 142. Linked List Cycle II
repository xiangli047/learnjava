if(head == null|| head.next==null) return null;
        
        ListNode walker = head,runner = head;  
        while(true)  
        {  
            if(runner==null || runner.next==null){
                return null;
            }
            walker = walker.next;  
            runner = runner.next.next;  
            if(walker == runner)  
                break;  
        }  
        
        //set walk back to the start;
        walker = head;
        while(walker != runner)  
        {  
            walker = walker.next;  
            runner = runner.next;
        }
        return walker;
        
        // 假设从开始到相遇，Slower走过的路程长为s，由于Faster的步速是Slower的2倍，那么Faster在这段时间走的路程长为2s。

 而对于Faster来说，他走的路程还等于之前绕整个环跑的n圈的路程nc，加上最后这一次遇见Slower的路程s。

 所以我们有：

                   2s = nc + s 

 对于Slower来说，他走的路程长度s还等于他从链表起始处到相遇点的距离，所以有：

                    s = a + x 

 通过以上两个式子代入化简有：

                    a + x = nc

                    a = nc - x

                    a = (n-1)c + c-x

                    a = kc + (c-x)

那么可以看出，c-x，就是从相遇点继续走回到环入口的距离。上面整个式子可以看出，如果此时有个pointer1从起始点出
发并且同时还有个pointer2从相遇点出发继续往前走（都只迈一步），那么绕过k圈以后， pointer2会和pointer1在环入口相遇。这样，换入口就找到了。
