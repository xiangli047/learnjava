merge sort

public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        
        ListNode cut = null, slow = head, fast = head;
        while(fast != null && fast.next != null){
            cut = slow;
            slow = slow.next;
            fast=fast.next.next;
        }
        cut.next=null;
        return merge(sortList(head), sortList(slow));
    }
    
    private ListNode merge(ListNode left, ListNode right){
        ListNode head = new ListNode(0), pointer = head;
        
        while(left != null&&right != null){
            if(left.val < right.val){
                pointer.next = left;
                left = left.next;
            }else{
                pointer.next = right;
                right = right.next;
            }
            pointer = pointer.next;
        }
        
        pointer.next = left == null ? right : left;
        return head.next;
        
    }
    
    
    //quick sort
    public ListNode sortList(ListNode h) {
        if(h == null || h.next == null)
        return h;

    /*split into three list*/
    ListNode fakesmall = new ListNode(0), small = fakesmall;
    ListNode fakelarge = new ListNode(0), large = fakelarge;
    ListNode fakeequal = new ListNode(0), equal = fakeequal;

    ListNode cur = h; // pivot is h.
    while(cur != null){
        if(cur.val < h.val){
            small.next = cur;
            small = small.next;
        }
        else if(cur.val == h.val){
            equal.next = cur;
            equal = equal.next;
        }
        else{
            large.next = cur;
            large = large.next;
        }

        cur = cur.next;
    }

    // put an end.
    small.next = equal.next = large.next = null;
    // merge them and return . merge reusing below one. merge for quicksort should be simplified. 
    return merge(sortList(fakesmall.next), sortList(fakelarge.next),fakeequal.next) ;
    }
    
    private ListNode merge(ListNode left, ListNode right, ListNode middle){
        ListNode head = new ListNode(0), pointer = head;
        while(left != null){
            pointer.next = left;
            left = left.next;
            pointer = pointer.next;
        }
        while(middle != null){
            pointer.next = middle;
            middle = middle.next;
            pointer = pointer.next;
        }
        while(right != null){
            pointer.next = right;
            right = right.next;
            pointer = pointer.next;
        }
        
        return head.next;
        
    }
