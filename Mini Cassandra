/**
 * Definition of Column:
 * public class Column {
 *     public int key;
 *     public String value;
 *     public Column(int key, String value) {
 *         this.key = key;
 *         this.value = value;
 *    }
 * }
 */
public class MiniCassandra {
    private Map<String, NavigableMap<Integer,String>> dataBlocks; ***NavigableMap *** 
    public MiniCassandra() {
        // initialize your data structure here.
        dataBlocks = new HashMap<String, NavigableMap<Integer,String>>();
    }
    
    /**
     * @param raw_key a string
     * @param column_start an integer
     * @param column_end an integer
     * @return void
     */
    public void insert(String raw_key, int column_key, String column_value) {
        if(!dataBlocks.containsKey(raw_key)){
            dataBlocks.put(raw_key, new TreeMap<Integer,String>()); ***TreeMap ***
        }
            dataBlocks.get(raw_key).put(column_key,column_value);
    }

    /**
     * @param raw_key a string
     * @param column_start an integer
     * @param column_end an integer
     * @return a list of Columns
     */
    public List<Column> query(String raw_key, int column_start, int column_end) {
        List<Column> rst = new ArrayList<Column>();
        if(!dataBlocks.containsKey(raw_key)) return rst;
        for(Map.Entry<Integer, String> column : dataBlocks.get(raw_key).entrySet()){
            if(column_start <= column.getKey() && column.getKey() <= column_end){
                rst.add(new Column(column.getKey(), column.getValue()));
            }
        }
        return rst;
    }
}
